
plugins {
        id 'java-library'
        id 'maven-publish'
        id 'signing'
        id 'org.openjfx.javafxplugin' version '0.1.0'
        id "io.codearte.nexus-staging" version "0.30.0"
}

allprojects {
    group = 'org.jabref'
    version = '1.1.0-SNAPSHOT'
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply from: 'eclipse.gradle'


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    //withJavadocJar()
    withSourcesJar()

}

javafx {
    version = "2ÃŸ"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing' ]
}

dependencies {
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'afterburner.fx'
            from components.java
            pom {
                name = 'afterburner.fx'
                description = 'Afterburner.fx is a MVP framework for JavaFX.'
                url = 'https://github.com/JabRef/afterburner.fx'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'siedlerchr'
                        name = 'Christoph Schwentker'
                    }

                    developer {
                        id = 'koppor'
                        name = 'Oliver Kopp'
                    }
                    developer {
                        id = 'tobiasdiez'
                        name = 'Tobias Diez'
                    }
                    developer {
                        name = 'Adam Bien'
                    }
                }
                scm {
                    url = 'https://github.com/JabRef/afterburner.fx'
                    connection = 'scm:git:git://github.com/JabRef/afterburner.fx.git'
                    developerConnection = 'scm:git:git@github.com/JabRef/afterburner.fx.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        // This currently only works for released versions, as github has problems with overwriting snapshots
        if (isReleaseVersion) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/JabRef/afterburner.fx"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

signing {
    required = isReleaseVersion
    useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
    sign publishing.publications.mavenJava
}

nexusStaging {
    username = System.getenv("MAVEN_USERNAME")
    password = System.getenv("MAVEN_PASSWORD")
}

// Don't publish snapshots to Maven Central
closeAndReleaseRepository.onlyIf { isReleaseVersion }
closeRepository.onlyIf { isReleaseVersion }
releaseRepository.onlyIf { isReleaseVersion }
